// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fstate_2eproto;
class GameStateMessage;
class GameStateMessageDefaultTypeInternal;
extern GameStateMessageDefaultTypeInternal _GameStateMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GameStateMessage* Arena::CreateMaybeMessage<::GameStateMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class GameStateMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameStateMessage) */ {
 public:
  inline GameStateMessage() : GameStateMessage(nullptr) {};
  virtual ~GameStateMessage();

  GameStateMessage(const GameStateMessage& from);
  GameStateMessage(GameStateMessage&& from) noexcept
    : GameStateMessage() {
    *this = ::std::move(from);
  }

  inline GameStateMessage& operator=(const GameStateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStateMessage& operator=(GameStateMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameStateMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameStateMessage* internal_default_instance() {
    return reinterpret_cast<const GameStateMessage*>(
               &_GameStateMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameStateMessage& a, GameStateMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStateMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameStateMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameStateMessage* New() const final {
    return CreateMaybeMessage<GameStateMessage>(nullptr);
  }

  GameStateMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameStateMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameStateMessage& from);
  void MergeFrom(const GameStateMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStateMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameStateMessage";
  }
  protected:
  explicit GameStateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fstate_2eproto);
    return ::descriptor_table_game_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameStateFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // string game_state = 1;
  void clear_game_state();
  const std::string& game_state() const;
  void set_game_state(const std::string& value);
  void set_game_state(std::string&& value);
  void set_game_state(const char* value);
  void set_game_state(const char* value, size_t size);
  std::string* mutable_game_state();
  std::string* release_game_state();
  void set_allocated_game_state(std::string* game_state);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_game_state();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_game_state(
      std::string* game_state);
  private:
  const std::string& _internal_game_state() const;
  void _internal_set_game_state(const std::string& value);
  std::string* _internal_mutable_game_state();
  public:

  // int32 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GameStateMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameStateMessage

// string game_state = 1;
inline void GameStateMessage::clear_game_state() {
  game_state_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GameStateMessage::game_state() const {
  // @@protoc_insertion_point(field_get:GameStateMessage.game_state)
  return _internal_game_state();
}
inline void GameStateMessage::set_game_state(const std::string& value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:GameStateMessage.game_state)
}
inline std::string* GameStateMessage::mutable_game_state() {
  // @@protoc_insertion_point(field_mutable:GameStateMessage.game_state)
  return _internal_mutable_game_state();
}
inline const std::string& GameStateMessage::_internal_game_state() const {
  return game_state_.Get();
}
inline void GameStateMessage::_internal_set_game_state(const std::string& value) {
  
  game_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GameStateMessage::set_game_state(std::string&& value) {
  
  game_state_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GameStateMessage.game_state)
}
inline void GameStateMessage::set_game_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  game_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GameStateMessage.game_state)
}
inline void GameStateMessage::set_game_state(const char* value,
    size_t size) {
  
  game_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GameStateMessage.game_state)
}
inline std::string* GameStateMessage::_internal_mutable_game_state() {
  
  return game_state_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GameStateMessage::release_game_state() {
  // @@protoc_insertion_point(field_release:GameStateMessage.game_state)
  return game_state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GameStateMessage::set_allocated_game_state(std::string* game_state) {
  if (game_state != nullptr) {
    
  } else {
    
  }
  game_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GameStateMessage.game_state)
}
inline std::string* GameStateMessage::unsafe_arena_release_game_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GameStateMessage.game_state)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return game_state_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GameStateMessage::unsafe_arena_set_allocated_game_state(
    std::string* game_state) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (game_state != nullptr) {
    
  } else {
    
  }
  game_state_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      game_state, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GameStateMessage.game_state)
}

// int32 score = 2;
inline void GameStateMessage::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameStateMessage::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameStateMessage::score() const {
  // @@protoc_insertion_point(field_get:GameStateMessage.score)
  return _internal_score();
}
inline void GameStateMessage::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void GameStateMessage::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:GameStateMessage.score)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_5fstate_2eproto
